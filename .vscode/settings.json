{
    "cSpell.words": [
        "addopts",
        "aiofiles",
        "airx",
        "asyncio",
        "Bouchard",
        "chromadb",
        "codegen",
        "docstrings",
        "dotenv",
        "gooseai",
        "isort",
        "langchain",
        "langgraph",
        "mistralai",
        "mypy",
        "Nomic",
        "numpy",
        "Ollama",
        "openrouter",
        "pydantic",
        "pytest",
        "setuptools",
        "sqlalchemy",
        "testpaths",
        "typer",
        "venv",
        "zhipuai"
    ],
    "kiroAgent.configureMCP": "Enabled",
    "kiroAgent.trustedCommands": [
        "uv *",
        "ollama serve &",
        "source .venv/bin/activate && uv sync",
        "source .venv/bin/activate && uv pip sync requirements.uv",
        "curl *",
        "source .venv/bin/activate && python -m src.dev_guard.cli --help",
        "source .venv/bin/activate && python -m src.dev_guard.cli config --show",
        "source .venv/bin/activate && python -m src.dev_guard.cli config --validate",
        "env *",
        "source .venv/bin/activate && DEV_GUARD_LLM_PROVIDER=ollama python -m src.dev_guard.cli config --show",
        "source .venv/bin/activate && python -m src.dev_guard.cli config --show --file config/config.yaml",
        "source .venv/bin/activate && python -m src.dev_guard.cli models --provider ollama",
        "source .venv/bin/activate && python -m src.dev_guard.cli start",
        "ollama ps",
        "ollama run gpt-oss:20b \"Hello, are you working?\"",
        "mkdir -p data",
        "source .venv/bin/activate && python test_ollama.py",
        "source .venv/bin/activate && python test_ignore_patterns.py",
        "source .venv/bin/activate && python test_fixed_ignore.py",
        "rm -rf data/vector_db",
        "grep -A 25 \"ignore_patterns:\" config/config.yaml",
        "source .venv/bin/activate && python3 -c \"\nimport fnmatch\nfrom pathlib import Path\n\n# Test the ignore logic\ndef should_ignore_path(path: str, ignore_patterns: list[str]) -> bool:\n    path_obj = Path(path)\n    for part in path_obj.parts:\n        for pattern in ignore_patterns:\n            if fnmatch.fnmatch(part, pattern):\n                return True\n    for pattern in ignore_patterns:\n        if fnmatch.fnmatch(path, pattern) or fnmatch.fnmatch(path_obj.name, pattern):\n            return True\n    return False\n\nignore_patterns = ['.venv', 'venv', 'env', 'node_modules', '*.pyc', '__pycache__']\ntest_paths = [\n    '/Users/bretbouchard/apps/dev_guard/.venv/lib/python3.11/site-packages/test.py',\n    '/Users/bretbouchard/apps/dev_guard/src/dev_guard/test.py',\n    '/Users/bretbouchard/apps/dev_guard/test.pyc',\n    '/Users/bretbouchard/apps/dev_guard/__pycache__/test.py'\n]\n\nfor path in test_paths:\n    ignored = should_ignore_path(path, ignore_patterns)\n    print(f'{path} -> {\\\"IGNORED\\\" if ignored else \\\"INCLUDED\\\"}')\n\"",
        "ps aux | grep ollama",
        "ollama list",
        "pkill -f \"python -m src.dev_guard.cli start\"",
        "python -m src.dev_guard.cli start",
        "curl -s -X POST http://localhost:11434/api/generate -d '{\"model\": \"mistral:7b\", \"prompt\": \"Hello\", \"stream\": false}' | head -20"
    ]
}