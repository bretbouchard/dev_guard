#!/usr/bin/env python3
"""Validation script for Task 18: MCP Server Implementation."""

import asyncio
import sys
import traceback


def test_models():
    """Test MCP models and data structures."""
    print("\nüß™ Testing MCP Models...")
    
    try:
        from src.dev_guard.mcp.models import (
            MCPCapabilities,
            MCPError,
            MCPRequest,
            MCPResponse,
            MCPTool,
            MCPToolParameter,
        )
        
        # Test MCPError
        error = MCPError.method_not_found("test_method")
        assert error.code == -32601
        assert "test_method" in error.message
        print("   ‚úÖ MCPError creation works")
        
        # Test MCPRequest
        request = MCPRequest(
            id="test-123",
            method="tools/list",
            params={"test": "value"}
        )
        assert request.jsonrpc == "2.0"
        assert request.method == "tools/list"
        print("   ‚úÖ MCPRequest creation works")
        
        # Test MCPResponse
        response = MCPResponse.success("test-123", {"result": "success"})
        assert response.id == "test-123"
        assert response.result is not None
        print("   ‚úÖ MCPResponse creation works")
        
        # Test MCPTool
        param = MCPToolParameter(
            name="test_param",
            type="string",
            description="Test parameter",
            required=True
        )
        
        tool = MCPTool(
            name="test_tool",
            description="Test tool",
            parameters=[param]
        )
        tool_dict = tool.to_dict()
        assert "inputSchema" in tool_dict
        assert tool_dict["inputSchema"]["type"] == "object"
        print("   ‚úÖ MCPTool creation works")
        
        # Test MCPCapabilities
        capabilities = MCPCapabilities(
            tools={"listChanged": True},
            resources={"subscribe": False}
        )
        cap_dict = capabilities.to_dict()
        assert "tools" in cap_dict
        print("   ‚úÖ MCPCapabilities creation works")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Model test failed: {e}")
        traceback.print_exc()
        return False


def test_tools():
    """Test MCP tools."""
    print("\nüîß Testing MCP Tools...")
    
    try:
        from src.dev_guard.mcp.tools import (
            CodeContextTool,
            DependencyAnalysisTool,
            ImpactAnalysisTool,
            PatternSearchTool,
            RecommendationTool,
            SecurityScanTool,
        )
        
        # Test tool instantiation
        tools = [
            CodeContextTool(),
            PatternSearchTool(),
            DependencyAnalysisTool(),
            ImpactAnalysisTool(),
            SecurityScanTool(),
            RecommendationTool(),
        ]
        
        for tool in tools:
            assert tool.name
            assert tool.description
            assert hasattr(tool, 'parameters')
            assert hasattr(tool, 'execute')
            print(f"   ‚úÖ {tool.__class__.__name__} initialized")
        
        # Test tool MCP conversion
        code_tool = CodeContextTool()
        mcp_tool = code_tool.to_mcp_tool()
        tool_dict = mcp_tool.to_dict()
        assert tool_dict["name"] == "get_code_context"
        assert "inputSchema" in tool_dict
        print("   ‚úÖ Tool MCP conversion works")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Tools test failed: {e}")
        traceback.print_exc()
        return False


async def test_tool_execution():
    """Test tool execution."""
    print("\n‚ö° Testing Tool Execution...")
    
    try:
        from src.dev_guard.mcp.tools import CodeContextTool
        
        # Create a test file for analysis
        test_file = "task_18_validation.py"  # This file itself
        
        tool = CodeContextTool()
        result = await tool.execute({
            "file_path": test_file,
            "query": "validation"
        })
        
        assert "file_path" in result
        assert "language" in result
        assert result["file_path"] == test_file
        print("   ‚úÖ CodeContextTool execution works")
        
        # Test pattern search
        from src.dev_guard.mcp.tools import PatternSearchTool
        
        pattern_tool = PatternSearchTool()
        result = await pattern_tool.execute({
            "pattern_type": "function",
            "language": "python"
        })
        
        assert "pattern_type" in result
        assert result["pattern_type"] == "function"
        print("   ‚úÖ PatternSearchTool execution works")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Tool execution test failed: {e}")
        traceback.print_exc()
        return False


def test_server_initialization():
    """Test MCP server initialization."""
    print("\nüñ•Ô∏è Testing Server Initialization...")
    
    try:
        from src.dev_guard.mcp.server import MCPServer
        
        # Test server initialization
        server = MCPServer(
            host="localhost",
            port=8080
        )
        
        assert server.host == "localhost"
        assert server.port == 8080
        assert len(server.tools) > 0
        print(f"   ‚úÖ Server initialized with {len(server.tools)} tools")
        
        # Test capabilities
        capabilities = server.get_server_capabilities()
        cap_dict = capabilities.to_dict()
        assert "tools" in cap_dict
        print("   ‚úÖ Server capabilities available")
        
        # Test tool info
        tool_info = server.get_tool_info()
        assert len(tool_info) > 0
        print(f"   ‚úÖ Tool info available for {len(tool_info)} tools")
        
        # List available tools
        for tool_name, info in tool_info.items():
            print(f"      ‚Ä¢ {tool_name}: {info['description']}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Server initialization test failed: {e}")
        traceback.print_exc()
        return False


async def test_request_handling():
    """Test MCP request handling."""
    print("\nüì¨ Testing Request Handling...")
    
    try:
        from src.dev_guard.mcp.models import MCPRequest
        from src.dev_guard.mcp.server import MCPServer
        
        server = MCPServer()
        
        # Test initialize request
        init_request = MCPRequest(
            id="init-1",
            method="initialize",
            params={
                "protocol_version": "2024-11-05",
                "capabilities": {
                    "tools": {"listChanged": True}
                },
                "client_info": {
                    "name": "test-client",
                    "version": "1.0.0"
                }
            }
        )
        
        response = await server.handle_request(init_request)
        assert response.id == "init-1"
        assert response.result is not None
        print("   ‚úÖ Initialize request handled")
        
        # Test tools list request
        tools_request = MCPRequest(
            id="tools-1",
            method="tools/list"
        )
        
        response = await server.handle_request(tools_request)
        assert response.id == "tools-1"
        assert response.result is not None
        assert "tools" in response.result
        print(f"   ‚úÖ Tools list request handled ({len(response.result['tools'])} tools)")
        
        # Test tool call request
        tool_call_request = MCPRequest(
            id="call-1",
            method="tools/call",
            params={
                "name": "get_code_context",
                "arguments": {
                    "file_path": "task_18_validation.py"
                }
            }
        )
        
        response = await server.handle_request(tool_call_request)
        assert response.id == "call-1"
        assert response.result is not None
        print("   ‚úÖ Tool call request handled")
        
        # Test invalid method
        invalid_request = MCPRequest(
            id="invalid-1",
            method="nonexistent/method"
        )
        
        response = await server.handle_request(invalid_request)
        assert response.id == "invalid-1"
        assert response.error is not None
        assert response.error.code == -32601  # Method not found
        print("   ‚úÖ Invalid method handled correctly")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Request handling test failed: {e}")
        traceback.print_exc()
        return False


def test_cli_integration():
    """Test CLI integration."""
    print("\nüíª Testing CLI Integration...")
    
    try:
        # Test that MCP command exists by checking CLI code
        with open("src/dev_guard/cli.py") as f:
            cli_content = f.read()
        
        # Check for MCP server command definition
        assert "def mcp_server(" in cli_content
        assert "Start the Model Context Protocol server" in cli_content
        print("   ‚úÖ mcp-server command available in CLI")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå CLI integration test failed: {e}")
        traceback.print_exc()
        return False


def validate_task_requirements():
    """Validate Task 18 requirements."""
    print("\nüìã Validating Task 18 Requirements...")
    
    requirements = [
        ("18.1", "Model Context Protocol server interface",
         test_server_initialization),
        ("18.2", "IDE integration and recommendation tools", test_tools),
        ("18.3", "Goose capabilities through MCP", test_tool_execution),
        ("18.4", "Enhanced Goose MCP Integration", test_request_handling),
    ]
    
    passed = 0
    total = len(requirements)
    
    for req_id, description, test_func in requirements:
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = asyncio.run(test_func())
            else:
                result = test_func()
            
            if result:
                print(f"   ‚úÖ {req_id}: {description}")
                passed += 1
            else:
                print(f"   ‚ùå {req_id}: {description}")
        except Exception as e:
            print(f"   ‚ùå {req_id}: {description} - {e}")
    
    print(f"\nüìä Requirements Status: {passed}/{total} passed")
    return passed == total


def main():
    """Run validation."""
    print("üöÄ DevGuard Task 18: MCP Server Implementation Validation")
    print("=" * 60)
    
    tests = [
        ("Models", test_models),
        ("Tools", test_tools),
        ("Tool Execution", lambda: asyncio.run(test_tool_execution())),
        ("Server", test_server_initialization),
        ("Requests", lambda: asyncio.run(test_request_handling())),
        ("CLI Integration", test_cli_integration),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìù Running {test_name} Tests...")
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name} tests passed")
            else:
                print(f"‚ùå {test_name} tests failed")
        except Exception as e:
            print(f"‚ùå {test_name} tests crashed: {e}")
            traceback.print_exc()
    
    print(f"\nüéØ Overall Test Results: {passed}/{total} test suites passed")
    
    # Validate task requirements
    requirements_passed = validate_task_requirements()
    
    if passed == total and requirements_passed:
        print("\nüéâ Task 18: MCP Server Implementation - COMPLETE!")
        print("\nüìã Summary:")
        print("‚úÖ Model Context Protocol server interface implemented")
        print("‚úÖ IDE integration tools available")
        print("‚úÖ DevGuard capabilities exposed through MCP")
        print("‚úÖ Enhanced Goose integration via MCP")
        print("‚úÖ CLI integration for MCP server management")
        print("‚úÖ WebSocket and HTTP endpoints available")
        print("‚úÖ 6 specialized MCP tools implemented")
        
        return True
    else:
        print(f"\n‚ö†Ô∏è Task 18 validation incomplete: {passed}/{total} tests passed")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
